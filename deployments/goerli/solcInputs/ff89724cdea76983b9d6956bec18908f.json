{
  "language": "Solidity",
  "sources": {
    "contracts/NotificationService.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n// Custome errors\nerror NotificationService__ZeroAddress();\nerror NotificationService__ChannelAlreadyCreated();\n\nerror NotificationService__ChannelDoesNotExist();\nerror NotificationService__NotAdmin();\n\n// error NotificationService__NotADelegate();\n// error NotificationService__UserNotSubscribed();\n// error NotificationService__NeitherAdminNorDelegate();\n// error NotificationService__UserAlreadySubscribed();\n\ncontract NotificationService {\n    //enum and struct definitions\n    enum ChannelState {\n        ACTIVE,\n        MUTED,\n        DELETED\n    }\n\n    struct Channel {\n        address channelAddress;\n        address admin;\n        string channelName;\n        string channelDescription;\n        ChannelState channelState;\n        address[] delegates;\n        address[] subsribers;\n    }\n\n    // struct Subscription {\n    //     address channelAddress;\n    //     address user;\n    //     uint256 subscriberIndex;\n    // }\n\n    struct Delegate {\n        address channelAddress;\n        address delegate;\n        uint256 delegateIndex;\n    }\n\n    // struct NotificationMessage {\n    //     address channelAddress;\n    //     address admin;\n    //     address recipient;\n    //     string message;\n    // }\n\n    // state variables\n    // mapping(address => mapping(address => Subscription)) channelAddressToUserSubscription;\n    mapping(address => mapping(address => Delegate)) channelAddressToDelegate;\n    mapping(address => Channel) private channelAddressToChannel;\n    uint256 public channelCounter;\n\n    event ChannelCreated(\n        address indexed channelAddress,\n        address indexed admin,\n        string channelName,\n        string channelDescription\n    );\n    event DelegateAdded(address indexed channelAddress, address indexed delegate);\n    // event DelegateRemoved(address indexed admin, address indexed delegate);\n    // event ChannelMuted(address indexed admin);\n    // event ChannelUnmuted(address indexed admin);\n    // event ChannelDeleted(address indexed admin);\n    // event NotificationEvent(NotificationMessage notification);\n    // event UserSubscribed(uint256 indexed _channelId, address indexed subscriber);\n    // event UserUnsubscribed(uint256 indexed _channelId, address indexed subscriber);\n\n    modifier nonZeroAddress(address addr) {\n        if (addr == address(0)) {\n            revert NotificationService__ZeroAddress();\n        }\n        _;\n    }\n\n    modifier notAlreadyCreated(address _channelAddress) {\n        if (channelAddressToChannel[_channelAddress].admin != address(0)) {\n            revert NotificationService__ChannelAlreadyCreated();\n        }\n        _;\n    }\n\n    modifier channelExists(address _channelAddress) {\n        if (channelAddressToChannel[_channelAddress].admin == address(0)) {\n            revert NotificationService__ChannelDoesNotExist();\n        }\n        _;\n    }\n\n    modifier onlyAdmin(address _channelAddress, address caller) {\n        if (caller != channelAddressToChannel[_channelAddress].admin) {\n            revert NotificationService__NotAdmin();\n        }\n        _;\n    }\n\n    // modifier isDelegate(address admin, address delegate) {\n    //     if (delegateToAdmin[delegate] == address(0)) {\n    //         revert NotificationService__NotADelegate();\n    //     }\n    //     _;\n    // }\n\n    // modifier isSubscribed(address _recipient, address _admin) {\n    //     if (!addressToUser[_recipient].isSubscribed[_admin]) {\n    //         revert NotificationService__UserNotSubscribed();\n    //     }\n    //     _;\n    // }\n\n    // modifier onlyAdminOrDelegate(uint256 _channelId, address caller) {\n    //     if (\n    //         !(caller == channelIdToAdmin[_channelId] ||\n    //             delegateToAdmin[caller] == channelIdToAdmin[_channelId])\n    //     ) {\n    //         revert NotificationService__NeitherAdminNorDelegate();\n    //     }\n    //     _;\n    // }\n\n    // modifier notAlreadySubscribed(uint256 _channelId, address caller) {\n    //     if (addressToUser[caller].isSubscribed[channelIdToAdmin[_channelId]]) {\n    //         revert NotificationService__UserAlreadySubscribed();\n    //     }\n    //     _;\n    // }\n\n    function createChannel(\n        address _channelAddress,\n        string memory _channelName,\n        string memory _channelDescription\n    ) external nonZeroAddress(_channelAddress) notAlreadyCreated(_channelAddress) {\n        Channel memory newChannel = Channel(\n            _channelAddress,\n            msg.sender,\n            _channelName,\n            _channelDescription,\n            ChannelState.ACTIVE,\n            new address[](0),\n            new address[](0)\n        );\n        channelAddressToChannel[_channelAddress] = newChannel;\n        channelCounter++;\n        emit ChannelCreated(_channelAddress, msg.sender, _channelName, _channelDescription);\n    }\n\n    function addDelegate(address _channelAddress, address delegate)\n        external\n        nonZeroAddress(delegate)\n        nonZeroAddress(_channelAddress)\n        channelExists(_channelAddress)\n        onlyAdmin(_channelAddress, msg.sender)\n    {\n        uint256 delegateIndex = channelAddressToChannel[_channelAddress].delegates.length;\n        channelAddressToChannel[_channelAddress].delegates.push(delegate);\n        Delegate memory newDelegate = Delegate(_channelAddress, delegate, delegateIndex);\n        channelAddressToDelegate[_channelAddress][delegate] = newDelegate;\n        emit DelegateAdded(_channelAddress, delegate);\n    }\n\n    // function removeDelegate(address delegate)\n    //     external\n    //     channelExists(msg.sender)\n    //     onlyAdmin(msg.sender)\n    //     isDelegate(msg.sender, delegate)\n    // {\n    //     delete delegateToAdmin[delegate];\n    //     emit DelegateRemoved(msg.sender, delegate);\n    // }\n\n    // function muteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n    //     adminToChannel[msg.sender].channelState = ChannelState.MUTED;\n    //     emit ChannelMuted(msg.sender);\n    // }\n\n    // function unmuteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n    //     adminToChannel[msg.sender].channelState = ChannelState.ACTIVE;\n    //     emit ChannelUnmuted(msg.sender);\n    // }\n\n    // function deleteChannel() external channelExists(msg.sender) onlyAdmin(msg.sender) {\n    //     delete adminToChannel[msg.sender];\n    //     emit ChannelDeleted(msg.sender);\n    // }\n\n    // function sendNotification(\n    //     uint256 _channelId,\n    //     address _recipient,\n    //     string memory _message\n    // )\n    //     external\n    //     channelExists(channelIdToAdmin[_channelId])\n    //     isSubscribed(_recipient, channelIdToAdmin[_channelId])\n    //     onlyAdminOrDelegate(_channelId, msg.sender)\n    // {\n    //     NotificationMessage memory notif = NotificationMessage(\n    //         _channelId,\n    //         channelIdToAdmin[_channelId],\n    //         _recipient,\n    //         _message\n    //     );\n    //     emit NotificationEvent(notif);\n    // }\n\n    //////////////////////////////\n    ////// User Functions ////////\n    /////////////////////////////\n    // function subscribe(uint256 _channelId)\n    //     external\n    //     channelExists(channelIdToAdmin[_channelId])\n    //     notAlreadySubscribed(_channelId, msg.sender)\n    // {\n    //     addressToUser[msg.sender].isSubscribed[channelIdToAdmin[_channelId]] = true;\n    //     adminToChannel[channelIdToAdmin[_channelId]].subsribers.push(msg.sender);\n    //     emit UserSubscribed(_channelId, msg.sender);\n    // }\n\n    // function unsubscribe(uint256 _channelId)\n    //     external\n    //     channelExists(channelIdToAdmin[_channelId])\n    //     isSubscribed(msg.sender, channelIdToAdmin[_channelId])\n    // {\n    //     addressToUser[msg.sender].isSubscribed[channelIdToAdmin[_channelId]] = false;\n    //     emit UserUnsubscribed(_channelId, msg.sender);\n    // }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}